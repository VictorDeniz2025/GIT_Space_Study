Las cadenas en Python

Las cadenas son una estructura de datos en Python que permite almacenar secuencias de caracteres. Las cadenas son inmutables, lo que significa que no se pueden modificar después de su creación. Sin embargo, puedes realizar muchas operaciones útiles con ellas.

Sintaxis para crear una cadena:
cadena = "texto"

Ejemplo:
mi_cadena = "Hola Mundo"

Métodos de las cadenas en Python:

1. upper()
   Convierte todos los caracteres de la cadena a mayúsculas.
   Ejemplo:
   mi_cadena = "Hola Mundo"
   cadena_mayusculas = mi_cadena.upper()  # Devuelve "HOLA MUNDO"

2. lower()
   Convierte todos los caracteres de la cadena a minúsculas.
   Ejemplo:
   mi_cadena = "Hola Mundo"
   cadena_minusculas = mi_cadena.lower()  # Devuelve "hola mundo"

3. capitalize()
   Convierte el primer carácter de la cadena a mayúscula y el resto a minúsculas.
   Ejemplo:
   mi_cadena = "hola mundo"
   cadena_capitalizada = mi_cadena.capitalize()  # Devuelve "Hola mundo"

4. title()
   Convierte el primer carácter de cada palabra a mayúscula.
   Ejemplo:
   mi_cadena = "hola mundo"
   cadena_titulo = mi_cadena.title()  # Devuelve "Hola Mundo"

5. strip([chars])
   Elimina los caracteres especificados (o espacios en blanco por defecto) desde el principio y el final de la cadena.
   Ejemplo:
   mi_cadena = "  hola mundo  "
   cadena_limpia = mi_cadena.strip()  # Devuelve "hola mundo"

6. lstrip([chars])
   Elimina los caracteres especificados (o espacios en blanco por defecto) desde el principio de la cadena.
   Ejemplo:
   mi_cadena = "  hola mundo  "
   cadena_limpia_izquierda = mi_cadena.lstrip()  # Devuelve "hola mundo  "

7. rstrip([chars])
   Elimina los caracteres especificados (o espacios en blanco por defecto) desde el final de la cadena.
   Ejemplo:
   mi_cadena = "  hola mundo  "
   cadena_limpia_derecha = mi_cadena.rstrip()  # Devuelve "  hola mundo"

8. replace(old, new[, count])
   Reemplaza todas las apariciones de una subcadena por otra. Se puede especificar un número máximo de reemplazos.
   Ejemplo:
   mi_cadena = "Hola Mundo"
   cadena_reemplazada = mi_cadena.replace("Mundo", "Python")  # Devuelve "Hola Python"

9. split(sep=None, maxsplit=-1)
   Divide la cadena en una lista utilizando el separador especificado. Se puede especificar un número máximo de divisiones.
   Ejemplo:
   mi_cadena = "Hola Mundo"
   lista_palabras = mi_cadena.split()  # Devuelve ["Hola", "Mundo"]

10. join(iterable)
    Une los elementos de un iterable (como una lista) en una cadena, utilizando la cadena como separador.
    Ejemplo:
    lista_palabras = ["Hola", "Mundo"]
    cadena_unida = " ".join(lista_palabras)  # Devuelve "Hola Mundo"

11. find(sub[, start[, end]])
    Devuelve el índice de la primera aparición de la subcadena especificada. Devuelve -1 si no se encuentra.
    Ejemplo:
    mi_cadena = "Hola Mundo"
    indice = mi_cadena.find("Mundo")  # Devuelve 5

12. count(sub[, start[, end]])
    Devuelve el número de apariciones de la subcadena especificada.
    Ejemplo:
    mi_cadena = "Hola Mundo Mundo"
    cuenta = mi_cadena.count("Mundo")  # Devuelve 2

13. isalpha()
    Devuelve True si todos los caracteres de la cadena son letras.
    Ejemplo:
    mi_cadena = "Hola"
    es_alpha = mi_cadena.isalpha()  # Devuelve True

14. isdigit()
    Devuelve True si todos los caracteres de la cadena son dígitos.
    Ejemplo:
    mi_cadena = "12345"
    es_digit = mi_cadena.isdigit()  # Devuelve True

15. isalnum()
    Devuelve True si todos los caracteres de la cadena son alfanuméricos (letras o dígitos).
    Ejemplo:
    mi_cadena = "Hola123"
    es_alnum = mi_cadena.isalnum()  # Devuelve True

Operaciones Comunes a Todas las Secuencias en Python

Las secuencias en Python incluyen tipos de datos como listas, tuplas y cadenas. A continuación se describen algunas de las operaciones comunes que se pueden realizar en todas las secuencias:

1. **Indexación**:
   - Acceder a un elemento en una posición específica.
   - Sintaxis: `secuencia[indice]`
   - Ejemplo:
     ```python
     lista = [1, 2, 3]
     elemento = lista[0]  # Devuelve 1
     ```

2. **Rebanado (Slicing)**:
   - Obtener una subsecuencia de la secuencia original.
   - Sintaxis: `secuencia[inicio:fin:paso]`
   - Ejemplo:
     ```python
     lista = [1, 2, 3, 4, 5]
     sublista = lista[1:4]  # Devuelve [2, 3, 4]
     ```

3. **Concatenación**:
   - Combinar dos secuencias del mismo tipo.
   - Sintaxis: `secuencia1 + secuencia2`
   - Ejemplo:
     ```python
     lista1 = [1, 2]
     lista2 = [3, 4]
     lista_concatenada = lista1 + lista2  # Devuelve [1, 2, 3, 4]
     ```

4. **Repetición**:
   - Repetir una secuencia un número específico de veces.
   - Sintaxis: `secuencia * n`
   - Ejemplo:
     ```python
     lista = [1, 2]
     lista_repetida = lista * 3  # Devuelve [1, 2, 1, 2, 1, 2]
     ```

5. **Pertenencia**:
   - Verificar si un elemento está en la secuencia.
   - Sintaxis: `elemento in secuencia`
   - Ejemplo:
     ```python
     lista = [1, 2, 3]
     existe = 2 in lista  # Devuelve True
     ```

6. **Longitud**:
   - Obtener el número de elementos en la secuencia.
   - Sintaxis: `len(secuencia)`
   - Ejemplo:
     ```python
     lista = [1, 2, 3]
     longitud = len(lista)  # Devuelve 3
     ```

7. **Mínimo y Máximo**:
   - Obtener el valor mínimo o máximo de la secuencia.
   - Sintaxis: `min(secuencia)` y `max(secuencia)`
   - Ejemplo:
     ```python
     lista = [1, 2, 3]
     minimo = min(lista)  # Devuelve 1
     maximo = max(lista)  # Devuelve 3
     ```

8. **Suma**:
   - Obtener la suma de los elementos en la secuencia (solo para secuencias numéricas).
   - Sintaxis: `sum(secuencia)`
   - Ejemplo:
     ```python
     lista = [1, 2, 3]
     suma = sum(lista)  # Devuelve 6
     ```

9. **Contar Elementos**:
   - Contar el número de veces que un elemento aparece en la secuencia.
   - Sintaxis: `secuencia.count(elemento)`
   - Ejemplo:
     ```python
     lista = [1, 2, 2, 3]
     cuenta = lista.count(2)  # Devuelve 2
     ```

10. **Encontrar Índice**:
    - Encontrar el índice de la primera aparición de un elemento en la secuencia.
    - Sintaxis: `secuencia.index(elemento)`
    - Ejemplo:
      ```python
      lista = [1, 2, 3]
      indice = lista.index(2)  # Devuelve 1
      ```





Ejemplo completo:
mi_cadena = "Hola Mundo"
cadena_mayusculas = mi_cadena.upper()
cadena_minusculas = mi_cadena.lower()
cadena_capitalizada = mi_cadena.capitalize()
cadena_titulo = mi_cadena.title()
cadena_limpia = mi_cadena.strip()
cadena_limpia_izquierda = mi_cadena.lstrip()
cadena_limpia_derecha = mi_cadena.rstrip()
cadena_reemplazada = mi_cadena.replace("Mundo", "Python")
lista_palabras = mi_cadena.split()
cadena_unida = " ".join(lista_palabras)
indice = mi_cadena.find("Mundo")
cuenta = mi_cadena.count("Mundo")
es_alpha = mi_cadena.isalpha()
es_digit = mi_cadena.isdigit()
es_alnum = mi_cadena.isalnum()

Las cadenas son una herramienta fundamental en Python, y estos métodos te permiten manipularlas de diversas maneras para satisfacer tus necesidades de programación.