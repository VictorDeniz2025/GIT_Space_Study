Los conjuntos en Python

Los conjuntos son una estructura de datos en Python que permite almacenar múltiples elementos en una sola variable, pero a diferencia de las listas y las tuplas, los conjuntos no permiten elementos duplicados y no mantienen un orden específico. Los elementos de un conjunto pueden ser de diferentes tipos de datos, como números, cadenas, booleanos, etc.

Sintaxis para crear un conjunto:
conjunto = {elemento1, elemento2, elemento3, ...}

Ejemplo:
mi_conjunto = {1, 2, 3, "cuatro", True}

Métodos de los conjuntos en Python:

1. add(x)
   Agrega un elemento al conjunto.
   Ejemplo:
   mi_conjunto = {1, 2, 3}
   mi_conjunto.add(4)  # mi_conjunto ahora es {1, 2, 3, 4}

2. update(iterable)
   Agrega todos los elementos de un iterable (como otra lista o conjunto) al conjunto.
   Ejemplo:
   mi_conjunto = {1, 2, 3}
   mi_conjunto.update([4, 5, 6])  # mi_conjunto ahora es {1, 2, 3, 4, 5, 6}

3. remove(x)
   Elimina el elemento especificado del conjunto. Si el elemento no está presente, lanza un error KeyError.
   Ejemplo:
   mi_conjunto = {1, 2, 3}
   mi_conjunto.remove(2)  # mi_conjunto ahora es {1, 3}

4. discard(x)
   Elimina el elemento especificado del conjunto. Si el elemento no está presente, no hace nada.
   Ejemplo:
   mi_conjunto = {1, 2, 3}
   mi_conjunto.discard(2)  # mi_conjunto ahora es {1, 3}

5. pop()
   Elimina y devuelve un elemento aleatorio del conjunto.
   Ejemplo:
   mi_conjunto = {1, 2, 3}
   elemento = mi_conjunto.pop()  # mi_conjunto ahora es {2, 3} o {1, 3} o {1, 2}

6. clear()
   Elimina todos los elementos del conjunto.
   Ejemplo:
   mi_conjunto = {1, 2, 3}
   mi_conjunto.clear()  # mi_conjunto ahora es un conjunto vacío

7. union(*otros)
   Devuelve un nuevo conjunto con todos los elementos del conjunto original y todos los elementos de los otros conjuntos.
   Ejemplo:
   conjunto1 = {1, 2, 3}
   conjunto2 = {3, 4, 5}
   conjunto_union = conjunto1.union(conjunto2)  # conjunto_union es {1, 2, 3, 4, 5}

8. intersection(*otros)
   Devuelve un nuevo conjunto con los elementos comunes al conjunto original y a los otros conjuntos.
   Ejemplo:
   conjunto1 = {1, 2, 3}
   conjunto2 = {2, 3, 4}
   conjunto_interseccion = conjunto1.intersection(conjunto2)  # conjunto_interseccion es {2, 3}

9. difference(*otros)
   Devuelve un nuevo conjunto con los elementos del conjunto original que no están en los otros conjuntos.
   Ejemplo:
   conjunto1 = {1, 2, 3}
   conjunto2 = {2, 3, 4}
   conjunto_diferencia = conjunto1.difference(conjunto2)  # conjunto_diferencia es {1}

10. symmetric_difference(otro)
    Devuelve un nuevo conjunto con los elementos que están en uno de los conjuntos, pero no en ambos.
    Ejemplo:
    conjunto1 = {1, 2, 3}
    conjunto2 = {2, 3, 4}
    conjunto_diferencia_simetrica = conjunto1.symmetric_difference(conjunto2)  # conjunto_diferencia_simetrica es {1, 4}

11. issubset(otro)
    Devuelve True si todos los elementos del conjunto están en el otro conjunto.
    Ejemplo:
    conjunto1 = {1, 2}
    conjunto2 = {1, 2, 3}
    es_subconjunto = conjunto1.issubset(conjunto2)  # Devuelve True

12. issuperset(otro)
    Devuelve True si todos los elementos del otro conjunto están en el conjunto.
    Ejemplo:
    conjunto1 = {1, 2, 3}
    conjunto2 = {1, 2}
    es_superconjunto = conjunto1.issuperset(conjunto2)  # Devuelve True

13. isdisjoint(otro)
    Devuelve True si los conjuntos no tienen elementos en común.
    Ejemplo:
    conjunto1 = {1, 2, 3}
    conjunto2 = {4, 5, 6}
    es_disjunto = conjunto1.isdisjoint(conjunto2)  # Devuelve True

Operaciones Comunes a Todas las Secuencias en Python

Las secuencias en Python incluyen tipos de datos como listas, tuplas y cadenas. A continuación se describen algunas de las operaciones comunes que se pueden realizar en todas las secuencias:

1. **Indexación**:
   - Acceder a un elemento en una posición específica.
   - Sintaxis: `secuencia[indice]`
   - Ejemplo:
     ```python
     lista = [1, 2, 3]
     elemento = lista[0]  # Devuelve 1
     ```

2. **Rebanado (Slicing)**:
   - Obtener una subsecuencia de la secuencia original.
   - Sintaxis: `secuencia[inicio:fin:paso]`
   - Ejemplo:
     ```python
     lista = [1, 2, 3, 4, 5]
     sublista = lista[1:4]  # Devuelve [2, 3, 4]
     ```

3. **Concatenación**:
   - Combinar dos secuencias del mismo tipo.
   - Sintaxis: `secuencia1 + secuencia2`
   - Ejemplo:
     ```python
     lista1 = [1, 2]
     lista2 = [3, 4]
     lista_concatenada = lista1 + lista2  # Devuelve [1, 2, 3, 4]
     ```

4. **Repetición**:
   - Repetir una secuencia un número específico de veces.
   - Sintaxis: `secuencia * n`
   - Ejemplo:
     ```python
     lista = [1, 2]
     lista_repetida = lista * 3  # Devuelve [1, 2, 1, 2, 1, 2]
     ```

5. **Pertenencia**:
   - Verificar si un elemento está en la secuencia.
   - Sintaxis: `elemento in secuencia`
   - Ejemplo:
     ```python
     lista = [1, 2, 3]
     existe = 2 in lista  # Devuelve True
     ```

6. **Longitud**:
   - Obtener el número de elementos en la secuencia.
   - Sintaxis: `len(secuencia)`
   - Ejemplo:
     ```python
     lista = [1, 2, 3]
     longitud = len(lista)  # Devuelve 3
     ```

7. **Mínimo y Máximo**:
   - Obtener el valor mínimo o máximo de la secuencia.
   - Sintaxis: `min(secuencia)` y `max(secuencia)`
   - Ejemplo:
     ```python
     lista = [1, 2, 3]
     minimo = min(lista)  # Devuelve 1
     maximo = max(lista)  # Devuelve 3
     ```

8. **Suma**:
   - Obtener la suma de los elementos en la secuencia (solo para secuencias numéricas).
   - Sintaxis: `sum(secuencia)`
   - Ejemplo:
     ```python
     lista = [1, 2, 3]
     suma = sum(lista)  # Devuelve 6
     ```

9. **Contar Elementos**:
   - Contar el número de veces que un elemento aparece en la secuencia.
   - Sintaxis: `secuencia.count(elemento)`
   - Ejemplo:
     ```python
     lista = [1, 2, 2, 3]
     cuenta = lista.count(2)  # Devuelve 2
     ```

10. **Encontrar Índice**:
    - Encontrar el índice de la primera aparición de un elemento en la secuencia.
    - Sintaxis: `secuencia.index(elemento)`
    - Ejemplo:
      ```python
      lista = [1, 2, 3]
      indice = lista.index(2)  # Devuelve 1
      ```

Estas operaciones son comunes a todas las secuencias en Python y proporcionan una forma flexible y poderosa de manipular y trabajar con datos secuenciales.




Ejemplo completo:
mi_conjunto = {1, 2, 3}
mi_conjunto.add(4)
mi_conjunto.update([5, 6])
mi_conjunto.remove(2)
mi_conjunto.discard(3)
elemento = mi_conjunto.pop()
mi_conjunto.clear()
mi_conjunto = {1, 2, 3}
conjunto_union = mi_conjunto.union({4, 5})
conjunto_interseccion = mi_conjunto.intersection({2, 3, 4})
conjunto_diferencia = mi_conjunto.difference({2, 3, 4})
conjunto_diferencia_simetrica = mi_conjunto.symmetric_difference({2, 3, 4})
es_subconjunto = mi_conjunto.issubset({1, 2, 3, 4})
es_superconjunto = mi_conjunto.issuperset({1, 2})
es_disjunto = mi_conjunto.isdisjoint({4, 5, 6})

