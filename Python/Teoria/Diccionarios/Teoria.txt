Los diccionarios en Python

Los diccionarios son una estructura de datos en Python que permite almacenar pares de clave-valor. Cada clave en un diccionario es única y se utiliza para acceder a su valor correspondiente. Los diccionarios son mutables, lo que significa que se pueden modificar después de su creación.

Sintaxis para crear un diccionario:
diccionario = {clave1: valor1, clave2: valor2, ...}

Ejemplo:
mi_diccionario = {"nombre": "Juan", "edad": 30, "ciudad": "Madrid"}

Métodos de los diccionarios en Python:

1. keys()
   Devuelve una vista de las claves del diccionario.
   Ejemplo:
   mi_diccionario = {"nombre": "Juan", "edad": 30, "ciudad": "Madrid"}
   claves = mi_diccionario.keys()  # Devuelve dict_keys(['nombre', 'edad', 'ciudad'])

2. values()
   Devuelve una vista de los valores del diccionario.
   Ejemplo:
   mi_diccionario = {"nombre": "Juan", "edad": 30, "ciudad": "Madrid"}
   valores = mi_diccionario.values()  # Devuelve dict_values(['Juan', 30, 'Madrid'])

3. items()
   Devuelve una vista de los pares clave-valor del diccionario.
   Ejemplo:
   mi_diccionario = {"nombre": "Juan", "edad": 30, "ciudad": "Madrid"}
   items = mi_diccionario.items()  # Devuelve dict_items([('nombre', 'Juan'), ('edad', 30), ('ciudad', 'Madrid')])

4. get(clave[, valor_predeterminado])
   Devuelve el valor de la clave especificada. Si la clave no existe, devuelve el valor predeterminado (None si no se especifica).
   Ejemplo:
   mi_diccionario = {"nombre": "Juan", "edad": 30, "ciudad": "Madrid"}
   nombre = mi_diccionario.get("nombre")  # Devuelve 'Juan'
   pais = mi_diccionario.get("pais", "Desconocido")  # Devuelve 'Desconocido'

5. update(otro)
   Actualiza el diccionario con los pares clave-valor de otro diccionario o iterable.
   Ejemplo:
   mi_diccionario = {"nombre": "Juan", "edad": 30}
   mi_diccionario.update({"ciudad": "Madrid", "pais": "España"})  # mi_diccionario ahora es {'nombre': 'Juan', 'edad': 30, 'ciudad': 'Madrid', 'pais': 'España'}

6. pop(clave[, valor_predeterminado])
   Elimina la clave especificada y devuelve su valor. Si la clave no existe, devuelve el valor predeterminado (lanza un KeyError si no se especifica).
   Ejemplo:
   mi_diccionario = {"nombre": "Juan", "edad": 30}
   edad = mi_diccionario.pop("edad")  # Devuelve 30 y mi_diccionario ahora es {'nombre': 'Juan'}

7. popitem()
   Elimina y devuelve el último par clave-valor insertado en el diccionario.
   Ejemplo:
   mi_diccionario = {"nombre": "Juan", "edad": 30}
   ultimo_item = mi_diccionario.popitem()  # Devuelve ('edad', 30) y mi_diccionario ahora es {'nombre': 'Juan'}

8. clear()
   Elimina todos los elementos del diccionario.
   Ejemplo:
   mi_diccionario = {"nombre": "Juan", "edad": 30}
   mi_diccionario.clear()  # mi_diccionario ahora es {}

9. setdefault(clave[, valor_predeterminado])
   Devuelve el valor de la clave especificada. Si la clave no existe, la inserta con el valor predeterminado (None si no se especifica).
   Ejemplo:
   mi_diccionario = {"nombre": "Juan", "edad": 30}
   ciudad = mi_diccionario.setdefault("ciudad", "Desconocida")  # Devuelve 'Desconocida' y mi_diccionario ahora es {'nombre': 'Juan', 'edad': 30, 'ciudad': 'Desconocida'}

10. copy()
    Devuelve una copia superficial del diccionario.
    Ejemplo:
    mi_diccionario = {"nombre": "Juan", "edad": 30}
    copia_diccionario = mi_diccionario.copy()  # copia_diccionario es {'nombre': 'Juan', 'edad': 30}


Operaciones Comunes a Todas las Secuencias en Python

Las secuencias en Python incluyen tipos de datos como listas, tuplas y cadenas. A continuación se describen algunas de las operaciones comunes que se pueden realizar en todas las secuencias:

1. **Indexación**:
   - Acceder a un elemento en una posición específica.
   - Sintaxis: `secuencia[indice]`
   - Ejemplo:
     ```python
     lista = [1, 2, 3]
     elemento = lista[0]  # Devuelve 1
     ```

2. **Rebanado (Slicing)**:
   - Obtener una subsecuencia de la secuencia original.
   - Sintaxis: `secuencia[inicio:fin:paso]`
   - Ejemplo:
     ```python
     lista = [1, 2, 3, 4, 5]
     sublista = lista[1:4]  # Devuelve [2, 3, 4]
     ```

3. **Concatenación**:
   - Combinar dos secuencias del mismo tipo.
   - Sintaxis: `secuencia1 + secuencia2`
   - Ejemplo:
     ```python
     lista1 = [1, 2]
     lista2 = [3, 4]
     lista_concatenada = lista1 + lista2  # Devuelve [1, 2, 3, 4]
     ```

4. **Repetición**:
   - Repetir una secuencia un número específico de veces.
   - Sintaxis: `secuencia * n`
   - Ejemplo:
     ```python
     lista = [1, 2]
     lista_repetida = lista * 3  # Devuelve [1, 2, 1, 2, 1, 2]
     ```

5. **Pertenencia**:
   - Verificar si un elemento está en la secuencia.
   - Sintaxis: `elemento in secuencia`
   - Ejemplo:
     ```python
     lista = [1, 2, 3]
     existe = 2 in lista  # Devuelve True
     ```

6. **Longitud**:
   - Obtener el número de elementos en la secuencia.
   - Sintaxis: `len(secuencia)`
   - Ejemplo:
     ```python
     lista = [1, 2, 3]
     longitud = len(lista)  # Devuelve 3
     ```

7. **Mínimo y Máximo**:
   - Obtener el valor mínimo o máximo de la secuencia.
   - Sintaxis: `min(secuencia)` y `max(secuencia)`
   - Ejemplo:
     ```python
     lista = [1, 2, 3]
     minimo = min(lista)  # Devuelve 1
     maximo = max(lista)  # Devuelve 3
     ```

8. **Suma**:
   - Obtener la suma de los elementos en la secuencia (solo para secuencias numéricas).
   - Sintaxis: `sum(secuencia)`
   - Ejemplo:
     ```python
     lista = [1, 2, 3]
     suma = sum(lista)  # Devuelve 6
     ```

9. **Contar Elementos**:
   - Contar el número de veces que un elemento aparece en la secuencia.
   - Sintaxis: `secuencia.count(elemento)`
   - Ejemplo:
     ```python
     lista = [1, 2, 2, 3]
     cuenta = lista.count(2)  # Devuelve 2
     ```

10. **Encontrar Índice**:
    - Encontrar el índice de la primera aparición de un elemento en la secuencia.
    - Sintaxis: `secuencia.index(elemento)`
    - Ejemplo:
      ```python
      lista = [1, 2, 3]
      indice = lista.index(2)  # Devuelve 1
      ```

Estas operaciones son comunes a todas las secuencias en Python y proporcionan una forma flexible y poderosa de manipular y trabajar con datos secuenciales.



Ejemplo completo:
mi_diccionario = {"nombre": "Juan", "edad": 30, "ciudad": "Madrid"}
claves = mi_diccionario.keys()
valores = mi_diccionario.values()
items = mi_diccionario.items()
nombre = mi_diccionario.get("nombre")
pais = mi_diccionario.get("pais", "Desconocido")
mi_diccionario.update({"pais": "España"})
edad = mi_diccionario.pop("edad")
ultimo_item = mi_diccionario.popitem()
mi_diccionario.clear()
mi_diccionario = {"nombre": "Juan", "edad": 30}
ciudad = mi_diccionario.setdefault("ciudad", "Desconocida")
copia_diccionario = mi_diccionario.copy()

