Las listas en Python

Las listas son una estructura de datos en Python que permite almacenar múltiples elementos en una sola variable.
Los elementos de una lista pueden ser de diferentes tipos de datos, como números, cadenas, booleanos, etc.
Las listas son mutables, lo que significa que se pueden modificar después de su creación.

Sintaxis para crear una lista:
lista = [elemento1, elemento2, elemento3, ...]

Ejemplo:
mi_lista = [1, 2, 3, "cuatro", True]

Métodos de las listas en Python:

1. append(x)
   Agrega un elemento al final de la lista.
   Ejemplo:
   mi_lista.append(5)  # mi_lista ahora es [1, 2, 3, "cuatro", True, 5]

2. extend(iterable)
   Extiende la lista agregando todos los elementos de un iterable (como otra lista).
   Ejemplo:
   mi_lista.extend([6, 7])  # mi_lista ahora es [1, 2, 3, "cuatro", True, 5, 6, 7]

3. insert(i, x)
   Inserta un elemento en una posición específica.
   Ejemplo:
   mi_lista.insert(2, "nuevo")  # mi_lista ahora es [1, 2, "nuevo", 3, "cuatro", True, 5, 6, 7]

4. remove(x)
   Elimina la primera aparición del elemento especificado.
   Ejemplo:
   mi_lista.remove("cuatro")  # mi_lista ahora es [1, 2, "nuevo", 3, True, 5, 6, 7]

5. pop([i])
   Elimina y devuelve el elemento en la posición especificada. Si no se especifica una posición, elimina y devuelve el último elemento.
   Ejemplo:
   ultimo_elemento = mi_lista.pop()  # mi_lista ahora es [1, 2, "nuevo", 3, True, 5, 6]
   elemento_especifico = mi_lista.pop(2)  # mi_lista ahora es [1, 2, 3, True, 5, 6]

6. clear()
   Elimina todos los elementos de la lista.
   Ejemplo:
   mi_lista.clear()  # mi_lista ahora es []

7. index(x[, start[, end]])
   Devuelve el índice de la primera aparición del elemento especificado. Se pueden especificar índices de inicio y fin opcionales para buscar en un rango específico.
   Ejemplo:
   indice = mi_lista.index(3)  # Devuelve 2

8. count(x)
   Devuelve el número de veces que el elemento especificado aparece en la lista.
   Ejemplo:
   cuenta = mi_lista.count(3)  # Devuelve 1

9. sort(key=None, reverse=False)
   Ordena los elementos de la lista en su lugar (de forma ascendente por defecto). Se pueden especificar una función clave y un parámetro booleano para ordenar en orden descendente.
   Ejemplo:
   mi_lista.sort()  # Ordena la lista en orden ascendente
   mi_lista.sort(reverse=True)  # Ordena la lista en orden descendente

10. reverse()
    Invierte el orden de los elementos de la lista en su lugar.
    Ejemplo:
    mi_lista.reverse()  # Invierte el orden de los elementos de la lista

11. copy()
    Devuelve una copia superficial de la lista.
    Ejemplo:
    copia_lista = mi_lista.copy()  # copia_lista es una copia de mi_lista

Ejemplo completo:
mi_lista = [1, 2, 3, "cuatro", True]
mi_lista.append(5)
mi_lista.extend([6, 7])
mi_lista.insert(2, "nuevo")
mi_lista.remove("cuatro")
ultimo_elemento = mi_lista.pop()
elemento_especifico = mi_lista.pop(2)
mi_lista.clear()
mi_lista = [1, 2, 3, "cuatro", True]
indice = mi_lista.index(3)
cuenta = mi_lista.count(3)
mi_lista.sort()
mi_lista.reverse()
copia_lista = mi_lista.copy()

